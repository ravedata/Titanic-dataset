cylinders
year = as.factor(year)
year
origin = as.factor(origin)
origin
pairs(auto)
library(ggplot2)
pairs(auto)
pairs(auto)
plotmatrix(auto)
install.packages("GGally")
library(ggally)
library(GGally)
ggpairs(auto)
ggpairs(auto[,-c("name")])
ggpairs(auto[,-"name"])
ggpairs(auto[,-9])
pairs(auto)
library(MASS)
Boston = na.omit(Boston)
?Boston
str(Boston)
library(ggplot2)
attach(Boston)
pairs(Boston)
ggplot(data = Boston,aes(lstat,rad))
g =ggplot(data = Boston,aes(lstat,rad))
g + geom_point()
g =ggplot(data = Boston[,rad>10],aes(lstat,rad)
g + geom_point()
```
rad >10
y =rad >10
g =ggplot(data = Boston[rad],aes(lstat,rad)
g + geom_point()
```
g =ggplot(data = Boston,aes(lstat,rad),subset = rad)
g + geom_point()
newdata = Boston[,y]
newdata = Boston[y]
newdata = Boston[y,]
str(newdata)
g =ggplot(data = newdata,aes(lstat,rad))
g + geom_point()
g =ggplot(data = Boston,aes(lstat,rad), col=rad)
g + geom_point()
g + geom_point(aes(color = rad))
g + geom_point(aes(color = rad),size = 4)
g + geom_point(aes(color = rad),size = 4,alpha = 1/2)
qplot(x = lstat,y = crim,data = Boston)
qplot(x = lstat,y = crim,data = Boston,color = chas)
qplot(x = lstat,y = crim,data = Boston,color = chas, size =3, alpha = 1/2)
qplot(x = lstat,y = crim,data = Boston,color = chas, size = 2, alpha = 1/2)
chas= as.factor(chas)
qplot(x = lstat,y = crim,data = Boston,color = chas, size = 2, alpha = 1/2)
chas
qplot(x = lstat,y = crim,data = Boston,fill = chas, size = 2, alpha = 1/2)
qplot(x = lstat,y = crim,data = Boston,fill = chas, size = 2)
qplot(x = lstat,y = crim,data = Boston,fill = chas, facets = .~chas)
qplot(x = lstat,y = crim,data = Boston, facets = .~chas)
qplot(x = lstat,y = crim,data = Boston, facets = .~chas, color = chas)
qplot(x = lstat,y = crim,data = Boston, facets = .~chas, colour = chas)
str(Boston)
chas1= as.factor(chas)
chas1
qplot(x = lstat,y = crim,data = Boston, facets = .~chas, colour = chas1)
qplot(x = lstat,y = crim,data = Boston, facets = .~chas1, colour = chas1)
Boston$chas= as.factor(Boston$chas)
qplot(x = lstat,y = crim,data = Boston, colour = chas)
str(Boston)
qplot(x = lstat,y = crim,data = Boston, colour = chas,size=2 )
qplot(x = lstat,y = crim,data = Boston, colour = chas,size=2, apha =0.2 )
qplot(x = lstat,y = crim,data = Boston, colour = chas,size=2, alpha =0.2 )
qplot(x = rm,y = crim,data = Boston, colour = chas,size=2, alpha =0.2 )
qplot(x = rm,y = crim,data = Boston, colour = chas )
qplot(x = nox,y = crim,data = Boston, colour = chas )
qplot(x = age,y = crim,data = Boston, colour = chas )
qplot(x = dis,y = crim,data = Boston, colour = red )
qplot(x = dis,y = crim,data = Boston, colour = "red"" )
```
qplot(x = dis,y = crim,data = Boston, colour = "red")
qplot(x = dis,y = crim,data = Boston, colour = c("red")
```
qplot(x = dis,y = crim,data = Boston, colour = c("red"))
qplot(x = dis,y = crim,data = Boston, colour ="red"" )
```
qplot(x = dis,y = crim,data = Boston, colour ="red" )
qplot(x = dis,y = crim,data = Boston, colour ='red' )
?plotmatrix
ggpairs(data = Boston)
matplot(Boston[,crim],Boston[,-crim],type = "1",lty=1,pch =19)
matplot(Boston[,1],Boston[,-1],type = "1",lty=1,pch =19)
matplot(Boston[,1],Boston[,-1],type = 1,lty=1,pch =19)
matplot(Boston[1],Boston[-1],type = 1,lty=1,pch =19)
matplot(Boston[,1],Boston[,-1],type = 1,lty=1,pch =19)
matplot(Boston[,-1])
matplot(Boston[,-1],type = 1)
matplot(Boston[,-1],type ='1')
matplot(Boston[,-1],type ="1")
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
library(dplyr)
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
library(tidyr)
install.packages("tidyr")
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
library(tidyr)
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
Boston
Boston %>%
gather(Boston, value, -crim) %>%
ggplot(aes(crim, value)) + geom_point()
pairs(Boston)
str(Boston)
par(mfrow = c(3,5))
plot(zn,crim,col= red)
par(mfrow = c(3,5))
plot(zn,crim,col= "red")
plot(indus,crim,col= "blue")
plot(chaos,crim,col= "green")
plot(nox,crim,col= "yellow")
plot(rm,crim,col= "grey")
plot(age,crim,col= "magenta")
plot(dis,crim,col= "lightblue")
plot(rad,crim,col= "violet")
plot(tax,crim,col= "lightblue")
plot(ptratio,crim,col= "red")
plot(black,crim,col= "green")
plot(lstat,crim,col= "indigo")
plot(medv,crim,col= "red")
par(mfrow = c(3,5))
plot(zn,crim,col= "red")
plot(indus,crim,col= "blue")
plot(nox,crim,col= "yellow")
plot(rm,crim,col= "grey")
plot(age,crim,col= "magenta")
plot(dis,crim,col= "lightblue")
plot(rad,crim,col= "violet")
plot(tax,crim,col= "black")
plot(ptratio,crim,col= "red")
plot(black,crim,col= "green")
plot(lstat,crim,col= "orange")
plot(medv,crim,col= "blue")
par(mfrow= c(1,1))
?Boston
ggplot(data=Boston, aes(crim)) + geom_histogram()
hist(crim)
nrow(crim>20)
nrow(Boston[crim>20,])
ggplot(data=Boston, aes(tax)) + geom_histogram()
nrow(Boston[tax>450,])
hist(Boston$ptratio, breaks = 50)
nrow(Boston[Boston$ptratio > 20, ])
nrow(Boston[chas==1,])
median(Boston$ptratio)
hist(medv)
row.names(Boston[min(medv),])
Boston[5,]
range(crim)
Boston %>%
```
Boston
%>% mean(rm)
library(dplyr)
%>% mean(rm)
index = mean(rm)>7
Boston[index,]
Boston[index]
nrow(Boston[Bost$rm>7,])
nrow(Boston[Boston$rm>7,])
x = rnorm(100)
y = 2*x + rnorm(100)
fitstat = lm (y~x+0)
summary(fitstat)
fit6 <- lm(x ~ y + 0)
summary(fit6)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred[1:5,]
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
player <- c("Sachin Tendulkar", "Sourav Ganguly", "VVS Laxman", "Rahul Dravid")
player <- c("Sachin Tendulkar", "Sourav Ganguly", "VVS Laxman", "Rahul Dravid")
Y2010 <- c(48.8, 40.22, 51.02, 53.34)
Y2011 <- c(53.7, 41.9, 50.8, 59.44)
Y2012 <- c(60.0, 52.39, 61.2, 61.44)
paverage.df <- data.frame(player,Y2010,Y2011,Y2012)
paverage.df
library(tidyr)
help(gather)
gather.df = gather(data = paverage.df,key = C(Year), value = Y2010:Y2012 )
gather.df = gather(data = paverage.df,key = C("Year"), value = Y2010:Y2012 )
gather.df = gather(data = paverage.df,value = C("Year"), key = Y2010:Y2012 )
gather.df = gather(data = paverage.df,Year,Runs,Y2010:Y2012  )
gather.df
gather.df = gather(data = paverage.df,key =Year,value= Runs,Y2010:Y2012  )
gather.df
gather.df = gather(data = paverage.df,key =Year,value= Runs,value=Y2010:Y2012  )
gather.df
spread.df =  spread(gather.df,key = Year,value = Runs)
spread.df
fname <- c("Martina", "Monica", "Stan", "Oscar")
lname <- c("Welch", "Sobers", "Griffith", "Williams")
DoB <- c("1-Oct-1980", "2-Nov-1982", "13-Dec-1979", "27-Jan-1988")
first.df <- data.frame(fname,lname,DoB)
first.df
separate(data = first.df,col=DoB,into =c("date","month","year"),sep = "-" )
unite(data= first.df,col = c(fname,lname), into= c("Name"), sep=" "))
?unite
unite(data= first.df,col = "Name",c("fname,lname"), sep=" "))
unite(data= first.df,col =c("fname,lname"), sep=" "))
unite(data= first.df,col =c("fname,lname"), sep=" ")
unite(data= first.df,"Name",col =c("fname,lname"), sep=" ")
unite(data= first.df,c("Name"),col =c("fname,lname"), sep=" ")
unite(data= first.df,c("Name"),c("fname,lname"), sep=" ")
unite(data= first.df,"Name",c("fname,lname"), sep=" ")
unite(data= first.df,"Name",c(fname,lname), sep=" ")
eligion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
usd10k <- c(27,12,27,418)
usd20to30k <- c(60, 37, 30, 732)
usd30to40k <- c(81, 52, 34, 670)
mydf1.df <- data.frame(religion, usd10k, usd20to30k, usd30to40k)`
mydf1.df
mydf1.df
mydf1.df <- data.frame(religion, usd10k, usd20to30k, usd30to40k)
eligion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
usd10k <- c(27,12,27,418)
eligion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
religion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
usd10k <- c(27,12,27,418)
usd20to30k <- c(60, 37, 30, 732)
usd30to40k <- c(81, 52, 34, 670)
mydf1.df <- data.frame(religion, usd10k, usd20to30k, usd30to40k)
mydf1.df
religion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
eligion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
}
}}}}}}
religion <- c("Agnostic", "Atheist", "Buddhist", "Catholic")
usd10k <- c(27,12,27,418)
usd20to30k <- c(60, 37, 30, 732)
usd30to40k <- c(81, 52, 34, 670)
mydf1.df <- data.frame(religion, usd10k, usd20to30k, usd30to40k)
mydf1.df
library(tidyr)
gather(mydf1.df,key=Income Group,value=Income,c(usd10k,usd20to30k,usd30to40k))
gather(mydf1.df,key=IncomeGroup,value=Income,c(usd10k,usd20to30k,usd30to40k))
City <- c("Chennai", "Chennai","Hyderabad", "Hyderabad")
Year <- c(2010, 2010, 2010, 2010)
Element <- c("MaxTemp", "MinTemp","MaxTemp", "MinTemp")
Jan <- c(36,24,32,22)
Feb <- c(37,25,34,23)
Mar <- c(37.5,27,36,25)
mydf2.df <- data.frame(City,Year,Element,Jan,Feb,Mar)
print(mydf2.df)
gather(mydf2.df,Month,Temperature,c(Jan,Feb,Mar))
spread(mydf2.df,c(Maxtemp,Mintemp),value = Temperature)
spread(mydf2.df,Element,value = Temperature)
spread(mydf2.df,Element,Temperature)
spread(mydf2.df,Element,Temperature)
spread(mydf2.df,Element)
spread(mydf2.df,Element,Jan:Mar)
spread(mydf2.df,Element,Temp)
spread(mydf2.df,Element,c(Jan,Feb,Mar))
spread(mydf2.df,Element,c("Jan","Feb","Mar"))
print(mydf2.df)
gather(mydf2.df,Month,Temperature,c(Jan,Feb,Mar))
x= gather(mydf2.df,Month,Temperature,c(Jan,Feb,Mar))
spread(x,Element,Temperature)
x$Month = as.factor(x$Month)
spread(x,Element,Temperature)
y= spread(x,Element,Temperature)
?order
library(dplyr)
?order_by
?sort
sort(y)
order_by(y$Month,y)
x
y
help(order)
?sort
help(select)
y[order(y[1],y[3]),]
y[order(y[3]),]
y[order(y[3],decreasing = FALSE),]
y[order(as.integer(y[3]),decreasing = FALSE),]
y[order(as.factor(y[3]),decreasing = FALSE),]
y[order(y[1],decreasing = FALSE),]
y[order(c(y[1],y[3]),decreasing = FALSE),]
arrange(.data =y,Month)
arrange(.data =y,c(City,Month)
arrange(.data =y,c(City,Month))
arrange(.data =y,City)
arrange(.data =y,Month)
install.packages("sqldf")
library(sqldf
)
df = sqldf("select * from y order by City,Month")
df
df = sqldf("select * from y order by City asc")
df
df = sqldf("select * from y order by City,Month asc")
df
df = sqldf("select * from y group by City order by Month desc")
df
df = sqldf("select * from y group by City order by Month ")
df
df = sqldf("select * from y ")
df
Titanic.test$Survived = rep("NA",nrow(Titanic.test))
Titanic.given = read.csv("train.csv",na.strings = c("","NA"))
setwd("C:/vedant/StatisticalLearning/Titanic_DataSet")
Titanic.given = read.csv("train.csv",na.strings = c("","NA"))
Titanic.test = read.csv("test.csv",na.strings = c("","NA"))
Titanic.test$Survived = rep("NA",nrow(Titanic.test))
View(Titanic.test)
Titanic.test = Titanic.test[c(1,12,2:11)]
View(Titanic.test)
View(Titanic.test)
View(Titanic.given)
Titanic.Whole = as.data.frame(rbind(Titanic.given,Titanic.test))
View(Titanic.Whole)
View(Titanic.Whole)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("C:/vedant/StatisticalLearning/Titanic_DataSet")
# Chunk 3
Titanic.given = read.csv("train.csv",na.strings = c("","NA"))
Titanic.test = read.csv("test.csv",na.strings = c("","NA"))
# Make a combined dataset and call it Titanic.whole
## Titanic.test does not have a Survived column
Titanic.test$Survived = rep("NA",nrow(Titanic.test))
## Make Survived column as 2nd column
Titanic.test = Titanic.test[c(1,12,2:11)]
Titanic.Whole = as.data.frame(rbind(Titanic.given,Titanic.test))
sapply(Titanic.Whole, function(x) sum(is.na(x)))
Titanic.Whole$Ticket = gsub('/O 2','O2',Titanic.Whole$Ticket)
Titanic.given$Ticket
Titanic.Whole$Ticket = gsub("[[:punct:]]", "", Titanic.Whole$Ticket)
library(tidyr)
Titanic.Whole = separate(Titanic.Whole,Ticket,c("tempCabin","Ticket"),sep =" " ,fill = "left")
View(Titanic.Whole)
View(Titanic.Whole)
View(Titanic.test)
View(Titanic.test)
View(Titanic.given)
Titanic.Whole[is.na(Titanic.Whole[,"Age"]),"Age"] <- median(Titanic.Whole[,"Age"], na.rm = TRUE)
Titanic.Whole[is.na(Titanic.Whole[,"Embarked"]),"Embarked"] = "S"
Titanic.Whole$Ticket= as.character(Titanic.Whole$Ticket)
Titanic.Whole$NumFamMem = Titanic.Whole$SibSp+Titanic.Whole$Parch+1
Titanic.Whole$Child =ifelse(Titanic.Whole$Age<14,1,0)
nonNumeric = !is.numeric(Titanic.Whole$Ticket)
nonNumeric = as.numeric(Titanic.Whole$Ticket)
is.na(nonNumeric)
Titanic.Whole[is.na(nonNumeric),]
View(Titanic.given)
View(Titanic.given)
Titanic.Whole$Ticket = as.numeric(Titanic.Whole$Ticket)
library(tree)
Titanic.given = Titanic.Whole[Survived!="NA"]
Titanic.given = Titanic.Whole[Titanic.Whole$Survived!="NA"]
Titanic.given = Titanic.Whole[Titanic.Whole$Survived!="NA",]
Titanic.test = Titanic.Whole[Titanic.Whole$Survived=="NA",]
library(tree)
attach(Titanic.given)
View(Titanic.given)
View(Titanic.given)
tree.Titanic.given = tree(Survived~-c("Name","tempCabin","Cabin"))
tree.Titanic.given = tree(Survived~-c("Name","tempCabin","Cabin"),na.rm= TRUE)
tree.Titanic.given = tree(Survived~-c("Name","tempCabin","Cabin","Ticket"),na.rm= TRUE)
tree.Titanic.given = tree(Survived~.-c("Name","tempCabin","Cabin","Ticket"),na.rm= TRUE)
tree.Titanic.given = tree(Survived~.-c("Name","tempCabin","Cabin","Ticket"),data =Titanic.given,na.rm= TRUE)
tree.Titanic.given = tree(Survived~ Sex,data =Titanic.given,na.rm= TRUE)
tree.Titanic.given = tree(Survived~ Sex,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0)
tree.Titanic.given = tree(Survived~ Sex+Pclass,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0)
tree.Titanic.given = tree(Survived~ Sex+Pclass+Child+NumFamMem,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Pclass+Child+NumFamMem,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Pclass+Child+NumFamMem +Age,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Pclass+Child+NumFamMem +Age +Fare,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Pclass+Child+NumFamMem +Age +Fare+Embarked,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Pclass+NumFamMem +Age +Fare+Embarked,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem +Age +Fare+Embarked,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+Embarked,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
summary(tree.Titanic.given)
summary(tree.Titanic.given)
tree.Titanic.given
summary(tree.Titanic.given)
str(Titanic.given)
summary(tree.Titanic.given)
tree.Titanic.given = tree(Survived~ as.numeric(Sex)+NumFamMem+Age+Pclass,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
summary(tree.Titanic.given)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem+Age+as.character(Pclass),data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
summary(tree.Titanic.given)
str(Titanic.given)
Titanic.given$Survived = as.factor(Titanic.given$Survived)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given)
plot(tree.Titanic.given)
text(tree.Titanic.given ,pretty =0,cex=0.7)
summary(tree.Titanic.given)
tree.Titanic.given
set.seed(111)
given.train = sample(1:nrow(Titanic.given),(2*nrow(Titanic.given))/3)
given.test = Titanic.given[-given.train]
Survived.test = given.test$Survived
tree.Titanic.given.train.pred = predict(tree.Titanic.given.train,given.test,type="class")
tree.Titanic.given.train = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given, subset =given.train )
tree.Titanic.given.train.pred = predict(tree.Titanic.given.train,given.test,type="class")
tabletree.Titanic.given.train.pred,Survived.test)
table(tree.Titanic.given.train.pred,Survived.test)
given.train = sample(1:nrow(Titanic.given),(2*nrow(Titanic.given))/3)
given.test = Titanic.given[-given.train]
given.test = Titanic.given[-given.train,]
tree.Titanic.given.train = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given, subset =given.train )
tree.Titanic.given.train.pred = predict(tree.Titanic.given.train,given.test,type="class")
table(tree.Titanic.given.train.pred,Survived.test)
Survived.test = given.test$Survived
table(tree.Titanic.given.train.pred,Survived.test)
summary(tree.Titanic.given)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given)
tree.Titanic.Test.Pred = predict(tree.Titanic.given.train,given.test,type="class")
dim(tree.Titanic.Test.Pred)
length(tree.Titanic.Test.Pred)
tree.Titanic.given = tree(Survived~ Sex+NumFamMem+Age+Pclass,data =Titanic.given)
tree.Titanic.Test.Pred = predict(tree.Titanic.given,Titanic.given,type="class")
length(tree.Titanic.Test.Pred)
tree.Titanic.Test.Pred = predict(tree.Titanic.given,Titanic.Test,type="class")
tree.Titanic.Test.Pred = predict(tree.Titanic.given,Titanic.test,type="class")
length(tree.Titanic.Test.Pred)
submit_df =as.data.frame( cbind(PassengerId = Titanic.test$PassengerId,Survived=tree.Titanic.Test.Pred))
write.csv(submit_df,"submitdf.csv")
Titanic.given$Survived
